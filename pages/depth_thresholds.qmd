---
title: "Thresholds"
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(here)
library(lubridate)
library(plotly)
library(stringr)
library(summaryplots)

source(here("pages/import_data_and_params.R"))

st_locations <- st_locations %>%
  left_join(do_units, by = "STATION")

# filter depth data
dat_depth <- readRDS(here("pages/data/depth_rolling_sd_reprocessed.rds")) %>%
  select(
    -c(int_sample, n_sample, rolling_sd_flag_sensor_depth_measured_m)
  ) %>%
  ss_pivot_longer() %>%
  filter(
    # sensor read outside range
    !(station == "Olding Island" &
        deployment_range == "2022-Jun-03 to 2022-Sep-30" &
        depth_log == 3),
    # freshwater stations
    !(station %in% c("Piper Lake", "Hourglass Lake", "0193", "Sissiboo")),
    # suspect range
    !(station == "Long Beach" &
        deployment_range == "2020-Jul-16 to 2020-Nov-29" & depth_log == 5),
    !(station == "Sandy Cove" &
        deployment_range == "2020-Jul-16 to 2020-Nov-30" & depth_log == 5),
    !(station == "Tickle Island 1" &
        deployment_range == "2020-Oct-21 to 2021-Aug-25" & depth_log == 5)
  ) %>% 
  mutate(month = month(timestamp_utc)) %>% 
  ss_pivot_wider()
```

**Separate thresholds were calculated for depth measured in units of percent saturation and depth measured in units of mg per L. This page describes the thresholds for mg per L. Click [here](../pages/do_thresholds.qmd) for the thresholds for percent saturation.**

**QC test thresholds for depth were based on historical Coastal Monitoring Program data. Preliminary quality control (QC) was applied to the historical data. Obvious outliers, suspected biofouling, and freshwater stations were omitted.**

**To date, depth has only been measured in two counties[^1] in adjacent waterbodies[^2]. A single set of thresholds was determined for these counties.**

# Gross Range Test

## Sensor Thresholds

The sensor thresholds were determined based on the manual for the aquaMeasure SAL (Table 1).

::: panel-tabset

### Table 1

Table 1: Depth sensor thresholds for the Gross Range Test.
```{r}
sensors %>%
  filter(str_detect(variable, "depth")) %>%
  mutate(
    `Sensor (link to spec sheet)` =
      paste0('<a  target=_blank href=', url, '>', sensor_type,'</a>')
  ) %>%
  select(`Sensor (link to spec sheet)`, sensor_min, sensor_max) %>%
  datatable(options = dt_options2, rownames = FALSE, escape = FALSE)
```
:::

## User Thresholds

The depth observations are relatively normally distributed (@fig-depth-hist), and so the mean and standard deviation were used to determine $user_{min}$ and $user_{max}$. The statistics and threshold values are shown in Table 2.

:::panel-tabset

### Figure 1
```{r}
#| warning: false
#| fig-height: 6
#| fig-cap: Distribution of depth observations (binwidth = 0.5 PSU). Dotted orange lines indicate the user thresholds.
#| label: fig-depth-hist

user_depth <- dat_depth %>% 
  group_by(county) %>% 
  qc_calculate_user_thresholds(
    var = "sensor_depth_measured_m",
    n_sd = 3, keep_stats = TRUE
  ) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) %>% 
  select(county, mean = mean_var, stdev = sd_var, user_min, user_max) 

p <- plot_histogram(
  dat_depth, hist_col = sensor_depth_measured_m, 
  binwidth = 2,
  pal= hist_pal
) +
  scale_x_continuous("Measured Sensor Depth (m)") +
  facet_wrap(~county, ncol = 2) +
  geom_vline(
    xintercept = c(0, 120), col = "#EDA247", linetype = 3) +
  theme(strip.background = element_rect(color = 1)) +
  theme_facet_plotly

ggplotly(p, tooltip = "text")
```

### Table 2

Table 2: Gross Range Test statistics and user thresholds for depth.
```{r}
# user_depth %>% 
#   rename(county = county_sal) %>% 
#   datatable(options = dt_options2, rownames = FALSE)
```
:::

# Climatological Test

**Didn't calculate these**

**@fig-depth-clim shows the monthly mean and standard deviation of depth data. The observations are normally distributed within each month (@fig-depth-hist-clim), and so the mean and standard deviation were used to calculate the seasonal thresholds (Table 3).**

::: panel-tabset

### Figure 2
```{r}
#| fig-height: 6
#| fig-cap: Mean +/- 3 standard deviations of the monthly depth observations.
#| label: fig-depth-clim
#| message: false

depth_clim <- dat_depth %>% 
  group_by(county, month) %>% 
  summarise(
    mean = mean(sensor_depth_measured_m), 
    stdev = sd(sensor_depth_measured_m)
  ) %>% 
  mutate(
    variable = "sensor_depth_measured_m",
    season_min = round(mean - 3 * stdev, digits = 3),
    season_max = round(mean + 3 * stdev, digits = 3)
  )

# # quick check
# do_thresh <- thresholds %>%
#   filter(variable == "sensor_depth_measured_m", qc_test == "climatology") %>%
#   pivot_wider(names_from = threshold, values_from = threshold_value)
# 
# all.equal(do_clim$season_min, do_thresh$season_min)
# all.equal(do_clim$season_max, do_thresh$season_max)

plot_mean_sd_season(depth_clim, n_sd = 3, facet_county = FALSE) +
  scale_y_continuous("Measured Sensor Depth (m)") +
  facet_wrap(~county, ncol = 2) +
  theme(strip.background = element_rect(color = 1)) +
  theme_facet_plotly
  
ggplotly(p)

```

### Figure 3
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap:  Seasonal distribution of depth observations (binwidth = 0.5 PSU). Dotted orange lines indicate the user thresholds. 
#| label: fig-depth-hist-clim
#| message: false

# # want this by county
# p <- dat_depth %>%
#   plot_histogram(
#     hist_col = sensor_depth_measured_m, binwidth = 2,
#     pal= hist_pal
#   ) +
#   scale_x_continuous("Measured Sensor Depth (m)") +
#   facet_wrap(~month,  ncol = 3) +
#   theme(strip.background = element_rect(color = 1)) #+
#   theme_facet_plotly
# 
# ggplotly(p, tooltip = "text")
```

### Table 3

Table 2: Climatology statistics and thresholds for depth.
```{r}
# depth_clim %>% 
#   mutate( 
#     season_mean = round(mean, digits = 3), 
#     season_stdev = round(stdev, digits = 3)
#   ) %>% 
#   select(month, season_mean, season_stdev, season_min, season_max) %>% 
#   datatable(options = dt_options, rownames = FALSE)
```

:::

# Spike Test

The distribution of the spike value is skewed right (@fig-depth-spike-dist), and so several upper quartile values (90th, 95th, and 99.7th quartile) were evaluated to use as the $spike_{low}$. 

There were relatively few large single-value spikes in the depth data, and so the 99.7th quartile was selected to avoid false positives. $spike_{high}$ was defined as 3 * $spike_{low}$ to identify especially egregious spike values.

::: panel-tabset

### Figure 4
```{r}
#| warning: false
#| fig-height: 6
#| fig-cap: Distribution of the spike value of depth observations (binwidth = 0.1 m). Dotted orange line indicates $spike_{low}$; dotted red line indicates $spike_{high}$.
#| label: fig-depth-spike-dist

spike_thresh <- thresholds %>% 
  filter(variable == "sensor_depth_measured_m", qc_test == "spike") %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) 

dat_sp <- dat_depth %>% 
  group_by(county, station, deployment_range, sensor_serial_number) %>%
  dplyr::arrange(timestamp_utc, .by_group = TRUE) %>%
  mutate(
    lag_value = lag(sensor_depth_measured_m),
    lead_value = lead(sensor_depth_measured_m),
    spike_ref = (lag_value + lead_value) / 2,
    spike_value = abs(sensor_depth_measured_m - spike_ref)  
  ) %>% 
  filter(!is.na(spike_value))

p <- dat_sp %>% 
  plot_histogram(hist_col = spike_value, binwidth = 0.1, pal = hist_pal) +
  facet_wrap(~county + sensor_type, ncol = 1) +
  geom_vline(
    dat = spike_thresh, aes(xintercept = spike_low), 
    col = "#EDA247", linetype = 3
  ) +
  geom_vline(
    dat = spike_thresh, aes(xintercept = spike_high), 
    col = "#DB4325", linetype = 3
  ) +
  scale_x_continuous("depth (PSU)\nSpike Value") +
  theme(strip.background = element_rect(color = 1))# +
  theme_facet_plotly

ggplotly(p, tooltip = "text")

```

### Table 4

Table 4: Spike thresholds for depth.
```{r}
spike_thresh %>% 
  select(spike_low, spike_high) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```

:::

# Rolling Standard Deviation Test

**The distribution of rolling standard deviation is skewed right (@fig-depth-roll-sd-dist), and so several upper quartile values were evaluated to use as the $rolling\_sd\_max$.** 

**The 90th, 95th, and 99.7th quartile values were each applied to the the raw data (no preliminary QC) and the results inspected. The 90th quartile was determined to be too stringent, as it generated false positives, while The 99.7th quartile was determined to be too lenient, as it resulted in false negatives. The 95th quartile identified 23 % of the raw data (no preliminary QC) as [Suspect/Of Interest]{style="color: #EDA247;"} and was considered the most useful threshold.**

**As discussed for depth (percent saturation), this is a very high percent of observations to flag as [Suspect/Of Interest]{style="color: #EDA247;"}. However, it was anticipated that a large proportion of the depth observations would be flagged by this test because there were substantial biofouling signals identified during the preliminary QC process. CMAR is currently assessing options to reduce biofouling on depth sensors.**

**There is no [Fail]{style="color: #DB4325;"} flag for the Rolling Standard Deviation Test because of the natural variability of the Water Quality variables. However, CMAR recommends that the depth observations flagged as [Suspect/Of Interest]{style="color: #EDA247;"} should be considered [Suspect]{style="color: #EDA247;"}, and filtered out of most analyses. **

::: panel-tabset

### Figure 5
```{r}
#| warning: false
#| fig-height: 6
#| fig-cap: Distribution of the 24-hour rolling standard deviation of depth observations (binwidth = 0.1 PSU). Dotted orange line indicates $rolling\_sd\_max$.
#| label: fig-depth-roll-sd-dist

sal_roll_sd <- thresholds %>% 
  filter(variable == "sensor_depth_measured_m", qc_test == "rolling_sd") %>% 
  select(county, threshold, threshold_value) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) %>% 
  mutate(county_sal = if_else(is.na(county), "Other", county))

p <- dat_depth %>% 
  filter(!is.na(sd_roll)) %>% 
  plot_histogram(
    hist_col = sd_roll, binwidth = 0.1, pal = hist_pal,
  ) +
  facet_wrap(~county_sal, ncol = 1) +
  geom_vline(
    dat = sal_roll_sd, aes(xintercept = rolling_sd_max), 
    linetype = 3, col = "#EDA247"
  ) +
  scale_x_continuous("depth (PSU)\nRolling Standard Deviation") +
  theme(strip.background = element_rect(color = 1)) +
  theme_facet_plotly


ggplotly(p, tooltip = "text")

```

### Table 5

Table 5: Rolling standard deviation threshold for depth.
```{r}
sal_roll_sd %>% 
  datatable(options = dt_options2, rownames = FALSE)
```
:::
