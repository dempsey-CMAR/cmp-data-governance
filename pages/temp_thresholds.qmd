---
title: "Thresholds"
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(dplyr)
library(here)
library(knitr)
library(htmltools)
library(lubridate)
library(plotly)
library(stringr)
library(summaryplots)

source(here("pages/import_data_and_params.R"))

dat_temp <- readRDS(here("pages/data/temp_rolling_sd_prelim_qc.rds")) %>%
  select(
    -c(sensor_type, int_sample, n_sample, rolling_sd_flag_temperature_degree_c)
  ) %>%
  mutate(
    depth = factor(sensor_depth_at_low_tide_m),
    month = month(timestamp_utc, label = TRUE)
  ) %>%
  rename(temperature_degree_c = value_temperature_degree_c) %>%
  filter(
    !(station %in% c("Piper Lake", "Hourglass Lake", "0193", "Sissiboo")),
    !(county == "Inverness" & depth %in% c(18, 23, 26, 28, 36, 40))
  )
```

Temperature thresholds were calculated from the historical Coastal Monitoring Program data. Preliminary quality control was applied to this data, and obvious outliers and data from freshwater stations were omitted.

Separate thresholds were calculated for each county due to expected and observed spatial differences in temperature (@fig-temp-hist; @fig-temp-clim).

In the future, it may be useful to resolve temperature thresholds by depth as well as county (or smaller spatial scales). However, the data become very patchy when grouped by depth, which could result in less useful thresholds values. Additionally, the same depth can represent a different part of the water column for different stations. For example, at the Barren Island station in Guysborough County, the 15 m sensor is near the bottom. In contrast, 15 m is in the top 20 % of the water column at Tickle Island, another station in Guysborough County.

# Gross Range Test

## Sensor Thresholds

The sensor thresholds were determined based on the associated manual (Table 1).

:::panel-tabset
### Table 1

Table 1: Temperature sensor thresholds for the Gross Range Test.
```{r}
sensors %>% 
  filter(variable == "temperature_degree_c") %>%
  mutate(
    `Sensor Type (link to manual)` = 
      paste0('<a  target=_blank href=', url, '>', sensor_type,'</a>')
  ) %>% 
  select(`Sensor Type (link to manual)`, sensor_min, sensor_max ) %>%
  distinct() %>% 
  datatable(
    options <- list(
      dom = 'ft',
      searching = FALSE,
      columnDefs = list(list(className = 'dt-center', targets = "_all"))
    ), 
    rownames = FALSE, escape = FALSE
  )
```
:::

## User Thresholds


The mean and standard deviation were used to determine $user_{min}$ and $user_{max}$. This provided useful thresholds, although different statistics may be more representative based on the distribution of the observations for some counties (@fig-temp-hist). The statistics and threshold values are shown in Table 2.

The $user_{min}$ threshold is typically << 0 °C (Table 2), and is therefore not expected to flag any observations. For most counties (all except Annapolis, Queens, Shelburne, and Digby), the $user_{min}$ is less than the $sensor_{min}$ for the aquameasure and vr2ar sensors. In this case, any observations less than the $sensor_{min}$ would [fail]{style="color: #DB4325;"} the Gross Range Test (i.e., the $user_{min}$ would be ignored). 

It may be useful for other users to apply their own $user_{min}$ threshold to highlight cold observations that are [Suspect/Of Interest]{style="color: #EDA247;"}. For example, those interested in salmonid aquaculture may wish to flag observations at or near the superchill threshold (-0.7 °C).


:::panel-tabset

### Figure 1
```{r}
#| warning: false
#| fig-height: 12
#| fig-cap: Distribution of temperature observations (binwidth = 1 °C). Dotted orange lines indicate the user thresholds.
#| label: fig-temp-hist

user_temp <- dat_temp %>% 
  group_by(county) %>% 
  qc_calculate_user_thresholds(
    var = "temperature_degree_c",
    n_sd = 3, keep_stats = TRUE
  ) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) %>% 
  select(county, mean = mean_var, stdev = sd_var, user_min, user_max) 

p <- plot_histogram(
  dat_temp, hist_col = temperature_degree_c, binwidth = 2, pal= hist_pal) +
  facet_wrap(~county, ncol = 2, scales = "free_y") +
  geom_vline(
    dat = user_temp, aes(xintercept = user_min), 
    linetype = 3, col = "#EDA247"
  ) +
  geom_vline(
    dat = user_temp, aes(xintercept = user_max),
    linetype = 3, col = "#EDA247"
  ) +
  scale_x_continuous("Temperature (degree C)") +
  theme_facet_plotly2

ggplotly(p, tooltip = "text")
```

### Table 2

Table 2: Gross Range Test statistics and user thresholds for temperature.
```{r}
user_temp %>% 
  datatable(options = dt_options, rownames = FALSE)
```
:::

# Climatological Test

@fig-temp-clim shows the monthly mean and standard deviation of temperature data for each county. Observations from all depths were pooled together. This resulted in high standard deviations for some counties, particularly in the summer months when temperature stratification is the strongest (@fig-temp-clim; Table 3). 

The observations are normally distributed within each month (Figure 3), and so the mean and standard deviation were used to calculate the seasonal thresholds (Table 3).

::: panel-tabset

### Figure 2
```{r}
#| fig-height: 12
#| fig-cap: Mean +/- 3 standard deviations of the monthly depth observations.
#| label: fig-temp-clim
#| message: false

temp_clim <- dat_temp %>% 
  group_by(county, month) %>% 
  summarise(
    mean = mean(temperature_degree_c), 
    stdev = sd(temperature_degree_c)
  ) %>% 
  ungroup() %>% 
  mutate(
    variable = "temperature_degree_c",
    season_min = round(mean - 3 * stdev, digits = 3),
    season_max = round(mean + 3 * stdev, digits = 3)
  )

# quick check
# do_thresh <- thresholds %>% 
#   filter(variable == "dissolved_oxygen_percent_saturation", qc_test == "climatology") %>% 
#   pivot_wider(names_from = threshold, values_from = threshold_value) 
# 
# all.equal(do_clim$season_min, do_thresh$season_min)
# all.equal(do_clim$season_max, do_thresh$season_max)

p <- plot_mean_sd_season(temp_clim, n_sd = 3, facet_county = TRUE, ncol = 2) +
  scale_y_continuous("Temperature (degree C)") +
  theme_facet_plotly

ggplotly(p)

```

:::

### Figure 3

Seasonal distribution of depth observations (binwidth = 2 °C). Dotted orange lines indicate the user thresholds.

::: panel-tabset

```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 1.5

plot_ly()

counties <- unique(user_temp$county)

for(i in seq_along(counties)) {
  
  county_i <- counties[i]
  temp_clim_i <- temp_clim %>% filter(county == county_i)
  
  cat(paste("### ", county_i, "\n \n"))
  
  p_i <- dat_temp %>%
    filter(county == county_i) %>% 
    plot_histogram(
      hist_col = temperature_degree_c, binwidth = 1, pal= hist_pal
    ) +
    scale_x_continuous("Temperature (degree C)") +
    facet_wrap(~month, ncol = 3) +
    geom_vline(
      dat = temp_clim_i, aes(xintercept = season_min), 
      linetype = 3, col = "#EDA247"
    ) +
    geom_vline(
      dat = temp_clim_i, aes(xintercept = season_max), 
      linetype = 3, col = "#EDA247"
    ) +
    theme(strip.background = element_rect(color = 1)) 
  
  print(
    htmltools::tagList(
      ggplotly(p_i, tooltip = "text", height = h_interactive())
    ))
  
  cat("\n\n")
}
```
:::

::: panel-tabset

### Table 3

Table 3: Seasonal statistics and thresholds for temperature.
```{r}
temp_clim %>% 
  mutate( 
    season_mean = round(mean, digits = 3), 
    season_stdev = round(stdev, digits = 3)
  ) %>% 
  select(county, month, season_mean, season_stdev, season_min, season_max) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```

:::

# Spike Test

For all counties, the distribution of the spike value is skewed right, and so several upper quartile values (90th, 95th, and 99.7th quartile) were evaluated to use as the $spike_{low}$. There were relatively few large single-value spikes in the temeprature data, and so the 99.7th quartile was selected to avoid false positives. $spike_{high}$ was defined as 3 * $spike_{low}$ to identify especially egregious spike values.


Figure 4 shows the distribution of the spike value of temperature observations (binwidth = 0.1 °C). There is a separate tab for each county. Dotted orange line indicates $spike_{low}$; dotted red line indicates $spike_{high}$. Note difference in y-axis scale.

### Figure 4

::: panel-tabset

```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 1

spike_thresh <- thresholds %>% 
  filter(variable == "temperature_degree_c", qc_test == "spike") %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) 

dat_sp <- dat_temp %>% 
  group_by(county, station, deployment_range, sensor_serial_number) %>%
  dplyr::arrange(timestamp_utc, .by_group = TRUE) %>%
  mutate(
    lag_value = lag(temperature_degree_c),
    lead_value = lead(temperature_degree_c),
    spike_ref = (lag_value + lead_value) / 2,
    spike_value = abs(temperature_degree_c - spike_ref)  
  ) %>% 
  ungroup() %>% 
  filter(!is.na(spike_value))

plot_ly()

for(i in seq_along(counties)) {
  
  county_i <- counties[i]
  spike_thresh_i <- spike_thresh %>% filter(county == county_i)
  
  cat(paste("### ", county_i, "\n \n"))
  
  p_i <- dat_sp %>% 
    filter(county == county_i) %>% 
    plot_histogram(hist_col = spike_value, binwidth = 0.1, pal = hist_pal) +
    geom_vline(
      dat = filter(spike_thresh, county == county_i), 
      aes(xintercept = spike_low), 
      col = "#EDA247", linetype = 3
    ) +
    geom_vline(
      dat = filter(spike_thresh, county == county_i), 
      aes(xintercept = spike_high), 
      col = "#DB4325", linetype = 3
    ) +
    scale_x_continuous("Temperature (degree C)\nSpike Value") +
    theme(strip.background = element_rect(color = 1)) 
  
  print(
    htmltools::tagList(
      ggplotly(p_i, tooltip = "text", height = h_interactive())
    ))
  
  cat("\n\n")
}

```
:::

::: panel-tabset

### Table 4

Table 4: Spike thresholds for temperature.
```{r}
spike_thresh %>% 
  select(county, spike_low, spike_high) %>% 
  datatable(options = dt_options, rownames = FALSE)
```
:::
  
  
# Rolling Standard Deviation Test

The distribution of rolling standard deviation is skewed right (@fig-sal-roll-sd-dist), and so several upper quartile values were evaluated to use as the $rolling\_sd\_max$. 

The 90th, 95th, and 99.7th quartile values were each applied to the the raw data (no preliminary QC) and the results inspected. There were minimal suspect changes in rolling standard deviation for temperature, and so the 99.7th quartile was selected to avoid false positives.

::: panel-tabset

### Figure 5
```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 1

temp_roll_sd <- thresholds %>% 
  filter(
    variable == "temperature_degree_c", qc_test == "rolling_sd"
  ) %>% 
  select(county, threshold, threshold_value) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) 


plot_ly()

for(i in seq_along(counties)) {
  
  county_i <- counties[i]
  roll_sd_i <- temp_roll_sd %>% filter(county == county_i)
  
  cat(paste("### ", county_i, "\n \n"))
  
  p_i <- dat_temp %>% 
    filter(!is.na(sd_roll), county == county_i) %>% 
    plot_histogram(
      hist_col = sd_roll, binwidth = 0.25, pal = hist_pal,
      user_thresh = roll_sd_i$rolling_sd_max
    ) +
    scale_x_continuous(
      "Temperature (degree C)\nRolling Standard Deviation")
  
   print(
    htmltools::tagList(
      ggplotly(p_i, tooltip = "text", height = h_interactive())
    ))
  
  cat("\n\n")
}
```

:::

::: panel-tabset

### Table 5

Table 5: Rolling standard deviation threshold for temperature.
```{r}
temp_roll_sd %>% 
  datatable(options = dt_options, rownames = FALSE)
```

:::