---
title: "Thresholds (% saturation)"
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(here)
library(lubridate)
library(plotly)
library(stringr)
library(summaryplots)

source(here("pages/import_data_and_params.R"))

st_locations <- st_locations %>%
  left_join(do_units, by = "STATION")

# filter DO (percent saturation) data
dat_sat <- readRDS(here("pages/data/do_rolling_sd_prelim_qc.rds")) %>% 
  select(-c(int_sample, n_sample, n_sample_effective)) %>% 
   filter(
    !(station %in% c("Piper Lake", "Hourglass Lake", "0193", "Sissiboo")),
    !(county == "Inverness" & sensor_depth_at_low_tide_m %in% c(8, 18, 28, 36)),
    !(county == "Guysborough" & sensor_depth_at_low_tide_m == 60)
  ) %>% 
  mutate(month = month(timestamp_utc, label = TRUE))

colnames(dat_sat) <- str_remove_all(colnames(dat_sat), "value_")
```

Separate thresholds were calculated for dissolved oxygen measured in units of percent saturation and dissolved oxygen measured in units of mg per L. This page describes the thresholds for percent saturation. Click [here](../pages/do_thresholds_mg_per_l.qmd) for the thresholds for mg per L.

QC test thresholds for dissolved oxygen (percent saturation) were based on historical Coastal Monitoring Program data. Preliminary quality control (QC) was applied to the historical data. Obvious outliers, suspected biofouling, and freshwater stations were omitted. Three deployments in Whycocomagh Basin (Inverness County) measured data near or below the oxycline. This data was also omitted from the thresholds analysis because it is not representative of typical conditions measured by the Program. 

The observations were pooled to calculate a single set of thresholds for all counties because there were limited observations for several counties[^1]. This analysis could be revisited and thresholds revised when there is more consistent data.

[^1]: 5 counties only have data from a single station

# Gross Range Test

## Sensor Thresholds

The sensor thresholds were determined based on the manual for the aquaMeasure DOT (Table 1).

:::panel-tabset
### Table 1

Table 1: Dissolved oxygen (percent saturation) sensor thresholds for the Gross Range Test.
```{r}
sensors %>%
  filter(str_detect(variable, "dissolved_oxygen"), sensor_type == "aquameasure") %>%
  mutate(
    `Sensor (link to spec sheet)` =
      paste0('<a  target=_blank href=', url, '>', sensor_type,'</a>')
  ) %>%
  select(`Sensor (link to spec sheet)`, sensor_min, sensor_max) %>%
  datatable(options = dt_options2, rownames = FALSE, escape = FALSE)
```
:::

## User Thresholds

The dissolved oxygen (percent saturation) observations are relatively normally distributed (@fig-do-hist), and so the mean and standard deviation were used to determine $user_{min}$ and $user_{max}$. The statistics and threshold values are shown in Table 2.

:::panel-tabset

### Figure 1
```{r}
#| warning: false
#| fig-height: 4
#| fig-cap: Distribution of dissolved oxygen (percent saturation) observations (binwidth = 2 %). Dotted orange lines indicate the user thresholds.
#| label: fig-do-hist

user_do <- dat_sat %>% 
  qc_calculate_user_thresholds(
    var = "dissolved_oxygen_percent_saturation",
    n_sd = 3, keep_stats = TRUE
  ) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) %>% 
  select(mean = mean_var, stdev = sd_var, user_min, user_max) 

p <- plot_histogram(
  dat_sat, hist_col = dissolved_oxygen_percent_saturation, binwidth = 2,
  pal= hist_pal, user_thresh = c(user_do$user_min, user_do$user_max)
) +
  scale_x_continuous("Dissolved Oxygen (percent saturation)")

ggplotly(p, tooltip = "text")
```

### Table 2

Table 2: Gross Range Test statistics and user thresholds for dissolved oxygen (percent saturation).
```{r}
user_do %>% 
  datatable(options = dt_options2, rownames = FALSE)
```
:::

# Climatological Test

@fig-do-clim shows the monthly mean and standard deviation of dissolved oxygen (percent saturation) data. The observations are normally distributed within each month (@fig-do-hist-clim), and so the mean and standard deviation were used to calculate the seasonal thresholds (Table 3).

::: panel-tabset

### Figure 2
```{r}
#| fig-height: 5
#| fig-cap: Mean +/- 3 standard deviations of the monthly dissolved oxygen (percent saturation) observations.
#| label: fig-do-clim
#| message: false

do_clim <- dat_sat %>% 
  group_by(month) %>% 
  summarise(
    mean = mean(dissolved_oxygen_percent_saturation), 
    stdev = sd(dissolved_oxygen_percent_saturation)
  ) %>% 
  mutate(
    variable = "dissolved_oxygen_percent_saturation",
    season_min = round(mean - 3 * stdev, digits = 3),
    season_max = round(mean + 3 * stdev, digits = 3)
  )

# quick check
# do_thresh <- thresholds %>% 
#   filter(variable == "dissolved_oxygen_percent_saturation", qc_test == "climatology") %>% 
#   pivot_wider(names_from = threshold, values_from = threshold_value) 
# 
# all.equal(do_clim$season_min, do_thresh$season_min)
# all.equal(do_clim$season_max, do_thresh$season_max)

p <- plot_mean_sd_season(do_clim, n_sd = 3, facet_county = FALSE) +
  scale_y_continuous("Dissolved Oxygen (percent saturation)")
  
ggplotly(p)

```

### Figure 3
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap:  Seasonal distribution of dissolved oxygen (percent saturation) observations (binwidth = 2 %). Dotted orange lines indicate the user thresholds. 
#| label: fig-do-hist-clim
#| message: false

p <- dat_sat %>% 
  plot_histogram(
    hist_col = dissolved_oxygen_percent_saturation, binwidth = 2,
    pal= hist_pal
  ) +
  geom_vline(
    data = do_clim, aes(xintercept = season_min), linetype = 3, col = "#EDA247"
  ) +
  geom_vline(
    data = do_clim, aes(xintercept = season_max), linetype = 3, col = "#EDA247"
  ) +
  scale_x_continuous("Dissolved Oxygen (percent saturation)") +
  facet_wrap(~month,  ncol = 3) +
  theme_facet_plotly

ggplotly(p, tooltip = "text")

```

### Table 3

Table 2: Climatology statistics and thresholds for dissolved oxygen (percent saturation).
```{r}
do_clim %>% 
  mutate( 
    season_mean = round(mean, digits = 3), 
    season_stdev = round(stdev, digits = 3)
  ) %>% 
  select(month, season_mean, season_stdev, season_min, season_max) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

:::

# Spike Test

The distribution of the spike value is skewed right (@fig-do-spike-dist), and so several upper quartile values (90th, 95th, and 99.7th quartile) were evaluated to use as the $spike_{low}$. 

There were relatively few large single-value spikes in the dissolved oxygen (percent saturation) data, and so the 99.7th quartile was selected to avoid false positives. $spike_{high}$ was defined as 3 * $spike_{low}$ to identify especially egregious spike values.

::: panel-tabset

### Figure 4
```{r}
#| warning: false
#| fig-height: 4
#| fig-cap: Distribution of the spike value of dissolved oxygen (percent saturation) observations (binwidth = 0.1 %). Dotted orange line indicates $spike_{low}$; dotted red line indicates $spike_{high}$.
#| label: fig-do-spike-dist

spike_thresh <- thresholds %>% 
  filter(variable == "dissolved_oxygen_percent_saturation", qc_test == "spike") %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value)

dat_sp <- dat_sat %>% 
  group_by(county, station, deployment_range, sensor_serial_number) %>%
  dplyr::arrange(timestamp_utc, .by_group = TRUE) %>%
  mutate(
    lag_value = lag(dissolved_oxygen_percent_saturation),
    lead_value = lead(dissolved_oxygen_percent_saturation),
    spike_ref = (lag_value + lead_value) / 2,
    spike_value = abs(dissolved_oxygen_percent_saturation - spike_ref)  
  ) %>% 
  filter(!is.na(spike_value))

p <- dat_sp %>% 
  plot_histogram(
    hist_col = spike_value, binwidth = 0.1, pal = hist_pal,
    user_thresh = spike_thresh$spike_low
  ) +
  geom_vline(xintercept = spike_thresh$spike_high, col = "#DB4325", linetype = 3) +
  scale_x_continuous("Dissolved Oxygen (percent saturation)\nSpike Value")

ggplotly(p, tooltip = "text")

```

### Table 4

Table 4: Spike thresholds for dissolved oxygen (percent saturation).
```{r}
spike_thresh %>% 
  select(spike_low, spike_high) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```

:::

# Rolling Standard Deviation Test

The distribution of rolling standard deviation is skewed right (@fig-do-roll-sd-dist), and so several upper quartile values were evaluated to use as the $rolling\_sd\_max$. 

The 90th, 95th, and 99.7th quartile values were each applied to the the raw data (no preliminary QC) and the results inspected. The 90th quartile was determined to be too stringent, as it flagged 31 % of the observations and generated false positives. The 99.7th quartile was determined to be too lenient, as only about 11 % of the observations were flagged, and visual inspection identified false negatives. The 95th quartile, which flagged 24 % of the observations, was considered the most useful threshold.

CMAR acknowledges that this is a very high percent of observations to flag as 
[Suspect/Of Interest]{style="color: #EDA247;"}. However, it was anticipated that a large proportion of the dissolved oxygen observations would be flagged by this test because there were substantial biofouling signals identified during the preliminary QC process. CMAR is currently assessing options to reduce biofouling on dissolved oxygen sensors.

There is no [Fail]{style="color: #DB4325;"} flag for the Rolling Standard Deviation Test because of the natural variability of the Water Quality variables. However, CMAR recommends that the dissolved oxygen observations flagged as [Suspect/Of Interest]{style="color: #EDA247;"} should be considered [Suspect]{style="color: #EDA247;"}, and filtered out of most analyses. 

::: panel-tabset

### Figure 5
```{r}
#| warning: false
#| fig-height: 4
#| fig-cap: Distribution of the 24-hour rolling standard deviation of dissolved oxygen (percent saturation) observations (binwidth = 0.25 %). Dotted orange line indicates $rolling\_sd\_max$.
#| label: fig-do-roll-sd-dist

do_roll_sd <- thresholds %>% 
  filter(
    variable == "dissolved_oxygen_percent_saturation", qc_test == "rolling_sd"
  ) %>% 
  select(threshold, threshold_value) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) 

p <- dat_sat %>% 
  filter(!is.na(sd_roll)) %>% 
  plot_histogram(
    hist_col = sd_roll, binwidth = 0.25, pal = hist_pal,
    user_thresh = do_roll_sd$rolling_sd_max
  ) +
  scale_x_continuous(
    "Dissolved Oxygen (percent saturation)\nRolling Standard Deviation")

ggplotly(p, tooltip = "text")
```

### Table 5

Table 5: Rolling standard deviation threshold for dissolved oxygen (percent saturation).
```{r}
do_roll_sd %>% 
  datatable(options = dt_options2, rownames = FALSE)
```

:::