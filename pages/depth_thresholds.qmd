---
title: "Thresholds"
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(here)
library(lubridate)
library(plotly)
library(stringr)
library(summaryplots)

source(here("pages/import_data_and_params.R"))

st_locations <- st_locations %>%
  left_join(do_units, by = "STATION")

# filter depth data
dat_depth <- readRDS(here("pages/data/depth_rolling_sd_reprocessed.rds")) %>%
  select(
    -c(int_sample, n_sample, rolling_sd_flag_sensor_depth_measured_m)
  ) %>%
  ss_pivot_longer() %>%
  filter(
    # sensor read outside range
    !(station == "Olding Island" &
        deployment_range == "2022-Jun-03 to 2022-Sep-30" &
        depth_log == 3),
    # freshwater stations
    !(station %in% c("Piper Lake", "Hourglass Lake", "0193", "Sissiboo")),
    # suspect range
    !(station == "Long Beach" &
        deployment_range == "2020-Jul-16 to 2020-Nov-29" & depth_log == 5),
    !(station == "Sandy Cove" &
        deployment_range == "2020-Jul-16 to 2020-Nov-30" & depth_log == 5),
    !(station == "Tickle Island 1" &
        deployment_range == "2020-Oct-21 to 2021-Aug-25" & depth_log == 5)
  ) %>% 
  mutate(month = month(timestamp_utc, label = TRUE)) %>% 
  ss_pivot_wider()
```


QC test thresholds for depth were based on historical Coastal Monitoring Program data. Preliminary quality control (QC) was applied to the historical data. Obvious outliers and freshwater stations were omitted.

The thresholds were calculated and applied to different groups for each QC test, as described below.


 There was no seasonal trend, and 


The user thresholds for the Gross Range Test were based on 

Separate thresholds were calculated for each county to account for the substantial spatial differences in tidal range around the province.

# Gross Range Test

## Sensor Thresholds

The sensor thresholds were determined based on the manual for the aquaMeasure and VR2AR sensors (Table 1).

::: panel-tabset

### Table 1

Table 1: Depth sensor thresholds for the Gross Range Test.
```{r}
sensors %>%
  filter(str_detect(variable, "depth")) %>%
  mutate(
    `Sensor (link to spec sheet)` =
      paste0('<a  target=_blank href=', url, '>', sensor_type,'</a>')
  ) %>%
  select(`Sensor (link to spec sheet)`, sensor_min, sensor_max) %>%
  distinct() %>% 
  datatable(options = dt_options2, rownames = FALSE, escape = FALSE)
```
:::

## User Thresholds

Measured sensor depth is a function of where the sensor is located on the string, and is not necessarily related to the historical measurements (@fig-depth-hist). For example, in Antigonish County have typically been moored in relatively shallow depths, but deeper sensors could be deployed there in the future.

To avoid flagging future observations at unusual depths, a single set of user thresholds was manually selected and applied to the pooled data.

:::panel-tabset

### Figure 1
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap: Distribution of depth observations (binwidth = 2 m). Dotted orange lines indicate the user thresholds.
#| label: fig-depth-hist

user_depth <- dat_depth %>% 
  group_by(county) %>% 
  qc_calculate_user_thresholds(
    var = "sensor_depth_measured_m",
    n_sd = 3, keep_stats = TRUE
  ) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) %>% 
  select(county, mean = mean_var, stdev = sd_var, user_min, user_max) 

p <- plot_histogram(
  dat_depth, hist_col = sensor_depth_measured_m, 
  binwidth = 2,
  pal= hist_pal
) +
  scale_x_continuous("Measured Sensor Depth (m)") +
  facet_wrap(~county, ncol = 2) +
  geom_vline(
    xintercept = c(0, 120), col = "#EDA247", linetype = 3) +
  theme_facet_plotly

ggplotly(p, tooltip = "text")
```

### Table 2

Table 2: Gross Range Test user thresholds for measured sensor depth.
```{r}
thresholds %>% 
  filter(variable == "sensor_depth_measured_m", qc_test == "grossrange") %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) %>% 
  select(user_min, user_max) %>% 
  na.omit() %>% 
  datatable(options = dt_options2, rownames = FALSE)
```
:::

# Climatological Test

The Climatological Test was not applied to the measured depth data because there was not an expected or observed seasonal cycle (@fig-depth-clim; fig-depth-hist-clim).

::: panel-tabset

### Figure 2
```{r}
#| fig-height: 10
#| fig-cap: Mean +/- 3 standard deviations of the monthly depth observations.
#| label: fig-depth-clim
#| message: false

depth_clim <- dat_depth %>% 
  group_by(county, month) %>% 
  summarise(
    mean = mean(sensor_depth_measured_m), 
    stdev = sd(sensor_depth_measured_m)
  ) %>% 
  mutate(
    variable = "sensor_depth_measured_m",
    season_min = round(mean - 3 * stdev, digits = 3),
    season_max = round(mean + 3 * stdev, digits = 3)
  )

p <- plot_mean_sd_season(depth_clim, n_sd = 3, facet_county = FALSE) +
  scale_y_continuous("Measured Sensor Depth (m)") +
  facet_wrap(~county, ncol = 2) +
  theme_facet_plotly
  
ggplotly(p, tooltip = "text")

```

### Figure 3
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap:  Seasonal distribution of depth observations (binwidth = 2 m). Dotted orange lines indicate the user thresholds. 
#| label: fig-depth-hist-clim
#| message: false

p <- dat_depth %>%
  plot_histogram(
    hist_col = sensor_depth_measured_m, binwidth = 2,
    pal= hist_pal
  ) +
  scale_x_continuous("Measured Sensor Depth (m)") +
  facet_wrap(~month,  ncol = 3) +
  theme_facet_plotly

ggplotly(p, tooltip = "text")
```

:::

# Spike Test

Because of the difference in precision between the types of sensors that record depth, the Spike Test thresholds were calculated by county and sensor type (@fig-depth-spike-dist-a; @fig-depth-spike-dist-b).

For all groups, the distribution of the spike value is skewed right, and so several upper quartile values (90th, 95th, and 99.7th quartile) were evaluated to use as the $spike_{low}$. There were relatively few large single-value spikes in the depth data, and so the 99.7th quartile was selected to avoid false positives. $spike_{high}$ was defined as 3 * $spike_{low}$ to identify especially egregious spike values.

::: panel-tabset

### Figure 4A
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap: Distribution of the spike value of depth observations measured by aquaMeasure sensors (binwidth = 0.1 m). Dotted orange line indicates $spike_{low}$; dotted red line indicates $spike_{high}$. Note difference in y-axis scale.
#| label: fig-depth-spike-dist-a

spike_thresh <- thresholds %>% 
  filter(variable == "sensor_depth_measured_m", qc_test == "spike") %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) 

dat_sp <- dat_depth %>% 
  group_by(county, station, deployment_range, sensor_serial_number) %>%
  dplyr::arrange(timestamp_utc, .by_group = TRUE) %>%
  mutate(
    lag_value = lag(sensor_depth_measured_m),
    lead_value = lead(sensor_depth_measured_m),
    spike_ref = (lag_value + lead_value) / 2,
    spike_value = abs(sensor_depth_measured_m - spike_ref)  
  ) %>% 
  ungroup() %>% 
  filter(!is.na(spike_value))

p <- dat_sp %>% 
  filter(sensor_type == "aquameasure", !is.na(spike_value)) %>%
  plot_histogram(hist_col = spike_value, binwidth = 0.1, pal = hist_pal) +
  facet_wrap(~county, ncol = 2, scales = "free_y") +
  geom_vline(
    dat = filter(spike_thresh, sensor_type == "aquameasure"),
    aes(xintercept = spike_low), 
    col = "#EDA247", linetype = 3
  ) +
  geom_vline(
    dat = filter(spike_thresh, sensor_type == "aquameasure"), 
    aes(xintercept = spike_high), 
    col = "#DB4325", linetype = 3
  ) +
  scale_x_continuous("Measured Sensor Depth (m)\nSpike Value") +
  theme_facet_plotly2

ggplotly(p, tooltip = "text")

```

### Figure 4B
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap: Distribution of the spike value of depth observations (binwidth = 0.1 m) measured by VR2AR sensors. Dotted orange line indicates $spike_{low}$; dotted red line indicates $spike_{high}$. Note difference in y-axis scale.
#| label: fig-depth-spike-dist-b

p <- dat_sp %>% 
  filter(sensor_type == "vr2ar") %>% 
  plot_histogram(hist_col = spike_value, binwidth = 0.1, pal = hist_pal) +
  facet_wrap(~county, ncol = 2, scales = "free_y") +
  geom_vline(
    dat = filter(spike_thresh, sensor_type == "vr2ar"),
    aes(xintercept = spike_low), 
    col = "#EDA247", linetype = 3
  ) +
  geom_vline(
    dat = filter(spike_thresh, sensor_type == "vr2ar"), 
    aes(xintercept = spike_high), 
    col = "#DB4325", linetype = 3
  ) +
  scale_x_continuous("Measured Sensor Depth (m)\nSpike Value") +
theme_facet_plotly2

ggplotly(p, tooltip = "text")

```

### Table 4

Table 4: Spike thresholds for depth.
```{r}
spike_thresh %>% 
  select(county, sensor_type, spike_low, spike_high) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

:::

# Rolling Standard Deviation Test

The Rolling Standard Deviation Test thresholds were calculated and applied separately for each county due to spatial differences in tidal range.

The distribution of rolling standard deviation is relatively normal for each county (@fig-depth-roll-sd-dist), and so the mean and standard deviation were used to calculate $rolling\_sd\_max$.

::: panel-tabset

### Figure 5
```{r}
#| warning: false
#| fig-height: 10
#| fig-cap: Distribution of the 24-hour rolling standard deviation of depth observations (binwidth = 0.1 m). Dotted orange line indicates $rolling\_sd\_max$.
#| label: fig-depth-roll-sd-dist

depth_roll_sd <- thresholds %>% 
  filter(variable == "sensor_depth_measured_m", qc_test == "rolling_sd") %>% 
  select(county, threshold, threshold_value) %>% 
  pivot_wider(names_from = threshold, values_from = threshold_value) 

p <- dat_depth %>% 
  filter(!is.na(sd_roll)) %>% 
  plot_histogram(hist_col = sd_roll, binwidth = 0.1, pal = hist_pal) +
  facet_wrap(~county, ncol = 2, scales = "free_y") +
  geom_vline(
    dat = depth_roll_sd, aes(xintercept = rolling_sd_max), 
    linetype = 3, col = "#EDA247"
  ) +
  scale_x_continuous("Measured Sensor Depth (m)\nRolling Standard Deviation") +
  theme_facet_plotly2

ggplotly(p, tooltip = "text")
```

### Table 5

Table 5: Rolling standard deviation threshold for depth.
```{r}
depth_roll_sd %>% 
  datatable(options = dt_options2, rownames = FALSE)
```
:::

# Depth Crosscheck
